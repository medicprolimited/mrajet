import datetime
import logging
import time
from typing import List, Dict, Any

# Set up logger
logger = logging.getLogger('report_generator')

def generate_report(enriched_results: List[Dict[str, Any]], url: str) -> str:
    """
    Generate a Markdown report summarizing the detection results.

    Parameters:
        enriched_results (List[Dict[str, Any]]): Enriched detection results with counter-arguments.
        url (str): The URL that was analyzed.

    Returns:
        str: Markdown formatted report.
    """
    logger.info(f"Starting report generation for {len(enriched_results)} results")
    start_time = time.time()

    # Group results by category
    logger.debug("Grouping results by category")
    categories: Dict[str, List[Dict[str, Any]]] = {}
    for result in enriched_results:
        category = result['category']
        if category not in categories:
            categories[category] = []
        categories[category].append(result)

    logger.debug(f"Results grouped into {len(categories)} categories")
    for category, results in categories.items():
        logger.debug(f"  - {category}: {len(results)} instances")

    # Generate the report
    logger.debug("Generating report content")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    report = f"""# Vaping Misinformation Report

## Analysis Details
- **URL**: {url}
- **Timestamp**: {timestamp}
- **Total Potential Misinformation Detected**: {len(enriched_results)}
- **Categories Detected**: {', '.join(categories.keys())}

## Summary of Findings

{generate_summary(categories)}

## Detailed Analysis

{generate_detailed_analysis(categories)}

## Disclaimer
This report was automatically generated by the Misinformation Reporting App. The detection of potential misinformation is based on similarity to known misleading statements and should be verified by experts. This tool is intended for educational and research purposes only.
"""

    logger.info(f"Report generation completed in {time.time() - start_time:.2f} seconds ({len(report)} characters)")
    return report

def generate_summary(categories: Dict[str, List[Dict[str, Any]]]) -> str:
    """
    Generate a summary section for the report.

    Parameters:
        categories (Dict[str, List[Dict[str, Any]]]): Dictionary mapping categories to lists of results.

    Returns:
        str: Markdown formatted summary.
    """
    logger.debug("Generating summary section")
    summary = ""

    for category, results in categories.items():
        formatted_category = category.replace('_', ' ').title()
        logger.debug(f"Adding summary for category: {formatted_category} ({len(results)} instances)")
        summary += f"### {formatted_category} ({len(results)} instances)\n\n"

        # Get counter-arguments for this category (should be the same for all results)
        if results and 'counter_arguments' in results[0]:
            counter_args = results[0]['counter_arguments']
            logger.debug(f"  - Including {len(counter_args)} counter-arguments")
            for arg in counter_args:
                summary += f"- {arg}\n"
            summary += "\n"
        else:
            logger.warning(f"  - No counter-arguments found for category: {category}")

    return summary

def generate_detailed_analysis(categories: Dict[str, List[Dict[str, Any]]]) -> str:
    """
    Generate a detailed analysis section for the report.

    Parameters:
        categories (Dict[str, List[Dict[str, Any]]]): Dictionary mapping categories to lists of results.

    Returns:
        str: Markdown formatted detailed analysis.
    """
    logger.debug("Generating detailed analysis section")
    detailed = ""

    for category, results in categories.items():
        formatted_category = category.replace('_', ' ').title()
        logger.debug(f"Adding detailed analysis for category: {formatted_category} ({len(results)} instances)")
        detailed += f"### {formatted_category}\n\n"

        for i, result in enumerate(results, 1):
            # Format confidence as percentage
            confidence = f"{result['confidence'] * 100:.1f}%"

            logger.debug(f"  - Adding detection {i} (confidence: {confidence})")

            detailed += f"#### Detection {i}\n\n"
            detailed += f"**Confidence**: {confidence}\n\n"
            detailed += f"**Detected Text**:\n> {result['chunk']}\n\n"
            detailed += f"**Similar Misinformation**:\n> {result['statement']}\n\n"

            if 'counter_arguments' in result:
                counter_args = result['counter_arguments']
                logger.debug(f"    - Including {len(counter_args)} counter-arguments")
                detailed += "**Counter Arguments**:\n"
                for arg in counter_args:
                    detailed += f"- {arg}\n"
                detailed += "\n"
            else:
                logger.warning(f"    - No counter-arguments for detection {i}")

            if 'sources' in result and result['sources']:
                logger.debug(f"    - Including {len(result['sources'])} sources")
                detailed += "**Sources**:\n"
                for source in result['sources']:
                    detailed += f"- {source}\n"
                detailed += "\n"

        detailed += "\n"

    return detailed